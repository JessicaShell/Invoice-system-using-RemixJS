{
  "version": 3,
  "sources": ["../../../app/routes/success.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\success.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\success.jsx\");\n  import.meta.hot.lastModified = \"1726941509565.0173\";\n}\n// REMIX HMR END\n\nimport { useSearchParams } from \"@remix-run/react\";\nexport default function Success() {\n  _s();\n  const [searchParams] = useSearchParams();\n\n  // Get customer and order details from the query parameters\n  const customerName = searchParams.get(\"name\");\n  const customerEmail = searchParams.get(\"email\");\n  const customerAddress = searchParams.get(\"address\");\n  const productName = searchParams.get(\"productName\");\n  const productPrice = searchParams.get(\"subtotal\");\n  const gst = searchParams.get(\"gst\");\n  const grandTotal = searchParams.get(\"grandTotal\");\n  return <div className=\"invoice-container\">\n      <style>{`\n        .invoice-container {\n          max-width: 600px;\n          margin: 20px auto;\n          padding: 20px;\n          border: 1px solid #ccc;\n          border-radius: 8px;\n          background-color: #f9f9f9;\n          box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        h1, h2 {\n          text-align: center;\n          color: #333;\n        }\n\n        .customer-details, .order-summary {\n          margin: 20px 0;\n        }\n\n        .invoice-table {\n          width: 100%;\n          border-collapse: collapse;\n          margin-bottom: 20px;\n        }\n\n        .invoice-table th, .invoice-table td {\n          border: 1px solid #ddd;\n          padding: 10px;\n          text-align: left;\n        }\n\n        .invoice-table th {\n          background-color: #f2f2f2;\n        }\n\n        .summary {\n          font-weight: bold;\n          text-align: right;\n        }\n\n        .summary p {\n          margin: 5px 0;\n        }\n      `}</style>\n\n      <h1>Order Successful!</h1>\n      <h2>Urban Outfitters</h2>\n      <center><h3>Invoice</h3></center>\n\n      <div className=\"customer-details\">\n        <h3>Customer Details</h3>\n        <p><strong>Name:</strong> {customerName}</p>\n        <p><strong>Email:</strong> {customerEmail}</p>\n        <p><strong>Address:</strong> {customerAddress}</p>\n      </div>\n\n      <div className=\"order-summary\">\n        <h3>Order Summary</h3>\n        <table className=\"invoice-table\">\n          <thead>\n            <tr>\n              <th>Product</th>\n              <th>Price</th>\n              <th>Quantity</th>\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{productName}</td>\n              <td>${parseFloat(productPrice).toFixed(2)}</td>\n              <td>1</td>\n              <td>${parseFloat(productPrice).toFixed(2)}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <div className=\"summary\">\n          <p><strong>Subtotal:</strong> ${parseFloat(productPrice).toFixed(2)}</p>\n          <p><strong>GST (18%):</strong> ${parseFloat(gst).toFixed(2)}</p>\n          <p><strong>Grand Total:</strong> ${parseFloat(grandTotal).toFixed(2)}</p>\n        </div>\n      </div>\n    </div>;\n}\n_s(Success, \"HWxNQEGJGSlsPJ3ubBB3081mtng=\", false, function () {\n  return [useSearchParams];\n});\n_c = Success;\nvar _c;\n$RefreshReg$(_c, \"Success\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
