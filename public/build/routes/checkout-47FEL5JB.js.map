{
  "version": 3,
  "sources": ["../../../app/routes/checkout.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\checkout.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\checkout.jsx\");\n}\n// REMIX HMR END\n\nimport { useSearchParams, Form, redirect } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport styles from './Styles/global.css';\nexport default function Checkout() {\n  _s();\n  const [searchParams] = useSearchParams();\n\n  // Get product details from query parameters\n  const productName = searchParams.get(\"name\");\n  const productPrice = searchParams.get(\"price\");\n\n  // State to handle customer form inputs\n  const [customerDetails, setCustomerDetails] = useState({\n    name: \"\",\n    email: \"\",\n    address: \"\"\n  });\n\n  // Handle form input change\n  const handleChange = e => {\n    setCustomerDetails({\n      ...customerDetails,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Calculate subtotal, GST, and grand total\n  const subtotal = parseFloat(productPrice);\n  const gst = subtotal * 0.18;\n  const grandTotal = subtotal + gst;\n\n  // If no product data is present in query params, show an error message\n  if (!productName || !productPrice) {\n    return <div>\n        <h1>Error: No product selected!</h1>\n        <a href=\"/cart\">Return to Cart</a>\n      </div>;\n  }\n  return <div>\n      <h1>Checkout</h1>\n\n      <h2>Customer Details</h2>\n      <Form method=\"post\" action=\"/checkout\">\n        <div>\n          <label>Name:</label>\n          <input type=\"text\" name=\"name\" value={customerDetails.name} onChange={handleChange} required />\n\n        </div>\n        <div>\n          <label>Email:</label>\n          <input type=\"email\" name=\"email\" value={customerDetails.email} onChange={handleChange} required />\n\n        </div>\n        <div>\n          <label>Address:</label>\n          <input type=\"text\" name=\"address\" value={customerDetails.address} onChange={handleChange} required />\n\n        </div>\n\n        <h2>Order Summary</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Product</th>\n              <th>Price</th>\n              <th>Quantity</th>\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{productName}</td>\n              <td>${subtotal.toFixed(2)}</td>\n              <td>1</td>\n              <td>${subtotal.toFixed(2)}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <div className=\"summary\">\n          <p>Subtotal: ${subtotal.toFixed(2)}</p>\n          <p>GST (18%): ${gst.toFixed(2)}</p>\n          <p>Grand Total: ${grandTotal.toFixed(2)}</p>\n        </div>\n\n        <button type=\"submit\" className=\"button\">\n          Complete Order\n        </button>\n      </Form>\n    </div>;\n}\n\n// Action handler for Checkout form submission\n_s(Checkout, \"pyFRli7BMfZZZoPiISnduXTQJPk=\", false, function () {\n  return [useSearchParams];\n});\n_c = Checkout;\nexport let action = async ({\n  request\n}) => {\n  let formData = await request.formData();\n\n  // Extract customer details from form\n  let customer = {\n    name: formData.get(\"name\"),\n    email: formData.get(\"email\"),\n    address: formData.get(\"address\")\n  };\n\n  // Retrieve product details\n  let productName = \"Bohemian Platform Bed\"; // Example product name\n  let subtotal = parseFloat(formData.get(\"price\")); // Assuming price is sent in the form\n  let gst = subtotal * 0.18;\n  let grandTotal = subtotal + gst;\n\n  // Redirect to success page with all data in query params\n  let queryParams = new URLSearchParams({\n    name: customer.name,\n    email: customer.email,\n    address: customer.address,\n    productName,\n    subtotal: subtotal.toFixed(2),\n    gst: gst.toFixed(2),\n    grandTotal: grandTotal.toFixed(2)\n  }).toString();\n  return redirect(`/success?${queryParams}`);\n};\n\n// Link styles (if any)\nexport function links() {\n  return [{\n    rel: 'stylesheet',\n    href: styles\n  }];\n}\nvar _c;\n$RefreshReg$(_c, \"Checkout\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
